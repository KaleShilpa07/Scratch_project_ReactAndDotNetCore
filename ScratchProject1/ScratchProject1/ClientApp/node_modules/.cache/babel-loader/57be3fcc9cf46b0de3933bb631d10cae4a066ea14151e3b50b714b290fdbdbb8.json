{"ast":null,"code":"const Validation = values => {\n  let error = {};\n  const Email_Pattern = /^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/;\n  const Password_pattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n  if (values.name === \"\") {\n    error.name = \"Name should be not empty\";\n  } else {\n    error.name = \"\";\n  }\n  if (values.email === \"\") {\n    error.email = \"Email should be not empty\";\n  } else if (!Email_Pattern.test(values.email)) {\n    error.email = \"Email Didn't match\";\n  } else {\n    error.email = \"\";\n  }\n  if (values.password === \"\") {\n    error.password = \"password should be not empty\";\n  } else if (!Password_pattern.test(values.password)) {\n    error.password = \"password Didn't match\";\n  } else {\n    error.password = \"\";\n  }\n  return error;\n};\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["Validation","values","error","Email_Pattern","Password_pattern","name","email","test","password","_c","$RefreshReg$"],"sources":["C:/Users/NTS-Shilpa Kale/source/repos/Scratch_project_ReactAndDotNetCore/ScratchProject1/ScratchProject1/ClientApp/src/components/SignUpValidation.js"],"sourcesContent":["const Validation = (values) => {\r\n    let error = {};\r\n\r\n    const Email_Pattern = /^[a-zA-Z0-9]+@(?:[a-zA-Z0-9]+\\.)+[A-Za-z]+$/;\r\n    const Password_pattern =\r\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n\r\n\r\n    if (values.name === \"\") {\r\n        error.name = \"Name should be not empty\";\r\n    }\r\n    else {\r\n        error.name = \"\";\r\n    }\r\n\r\n    if (values.email === \"\") {\r\n        error.email = \"Email should be not empty\";\r\n    } else if (!Email_Pattern.test(values.email)) {\r\n        error.email = \"Email Didn't match\";\r\n    } else {\r\n        error.email = \"\";\r\n    }\r\n\r\n    if (values.password === \"\") {\r\n        error.password = \"password should be not empty\";\r\n    } else if (!Password_pattern.test(values.password)) {\r\n        error.password = \"password Didn't match\";\r\n    } else {\r\n        error.password = \"\";\r\n    }\r\n    return error;\r\n};\r\n\r\nexport default Validation;\r\n"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,MAAM,IAAK;EAC3B,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,MAAMC,aAAa,GAAG,6CAA6C;EACnE,MAAMC,gBAAgB,GAClB,sEAAsE;EAG1E,IAAIH,MAAM,CAACI,IAAI,KAAK,EAAE,EAAE;IACpBH,KAAK,CAACG,IAAI,GAAG,0BAA0B;EAC3C,CAAC,MACI;IACDH,KAAK,CAACG,IAAI,GAAG,EAAE;EACnB;EAEA,IAAIJ,MAAM,CAACK,KAAK,KAAK,EAAE,EAAE;IACrBJ,KAAK,CAACI,KAAK,GAAG,2BAA2B;EAC7C,CAAC,MAAM,IAAI,CAACH,aAAa,CAACI,IAAI,CAACN,MAAM,CAACK,KAAK,CAAC,EAAE;IAC1CJ,KAAK,CAACI,KAAK,GAAG,oBAAoB;EACtC,CAAC,MAAM;IACHJ,KAAK,CAACI,KAAK,GAAG,EAAE;EACpB;EAEA,IAAIL,MAAM,CAACO,QAAQ,KAAK,EAAE,EAAE;IACxBN,KAAK,CAACM,QAAQ,GAAG,8BAA8B;EACnD,CAAC,MAAM,IAAI,CAACJ,gBAAgB,CAACG,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,EAAE;IAChDN,KAAK,CAACM,QAAQ,GAAG,uBAAuB;EAC5C,CAAC,MAAM;IACHN,KAAK,CAACM,QAAQ,GAAG,EAAE;EACvB;EACA,OAAON,KAAK;AAChB,CAAC;AAACO,EAAA,GA/BIT,UAAU;AAiChB,eAAeA,UAAU;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}